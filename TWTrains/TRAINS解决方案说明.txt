TRAINS
1.解决方案
  1）问题
    （1）图的定义用的是邻接矩阵
         solution:图定义中包含了任意两个节点之间的最短路径的长度，以及经过的节点两个变量。
                 原因：根据题目要求，每次只需求出指定入出点的最短路径（不是每一对）。
                 由于使用的是DIJKSTRA算法，在求出当前指定入出点结果时，可能已经求出其他两个节点之间的最短路径。
                 将此次保存在图中，在求其他两点最短路径时就可以直接得到结果。

    （2）对于求两点间最短路径
         solution:.采用DIJKSTRA算法，再求出指定节点时就直接返回。

    （3）设定一个经过的站点数量固定值，求两点间的路径数量。
         solution:.采用图论定理，A(i,j)=1当且仅当存在一条边i->j。令C=A*A，那么C(i,j)=ΣA(i,k)*A(k,j)，实际上就等于从点i到点j恰好经过2条边的路径数
		   A^i二分求出。

    （4）设定一个经过的站点数量最大值，求两点间的路径数量
         solution:根据上述（3）中的定理求出A + A^2 + A^3 + ... + A^k（k为最大值），采用二分求出A^k。对k进行二分。
         比如，当k=6时，有：A + A^2 + A^3 + A^4 + A^5 + A^6 =(A + A^2 + A^3) + A^3*(A + A^2 + A^3)应用这个式子后，规模k减小了一半。我们二分求出A^3后
	 再递归地计算A + A^2 + A^3。

    （5）设定一个经过的边的权值的最大值，求两点间的路径数量
         solution:采用DFS算法，仅仅使用最大值作为限制条件，当找到出点时保存当前路径。

    （6）指定路径长度
         solution:直接求出
  2）包含类
    （1）CTrain 主要类包含了所有的解决算法
    （2）CTrainTest测试类，主要是输出所有结果
    （3）CMatrix 矩阵模板类，是一个工具类
    （4）代码中的所有数据结构定义都在TrainDataDef.h文件中
    （5）包含错误定义的头文件TrainErrcodeDef.h，可以扩充。

  3）测试结果
     问题（1）有详细的输出结果。
     问题（2）输出在指定数据集上面的所有结果，经过确认正确。
     问题（3）由于采用图论定理，保证方法正确性。
     问题（4）同上
     问题（5）输出在指定数据集上面的所有结果，经过确认正确。

  4）其他
     定义一个“检查开始点是否有出边，结束点是否有入边”的方法，用于简单检测指定两点是否存在通路，在求最短路径和所有路径中使用。

2.待改善的地方
  1）由于“求所有路径”是一个NP问题，算法本身的复杂度比较高。
  2）求“两点间的路径数量”用图论定理，“求所有路径”用DFS算法，对于这两个问题，现在的方式是单独处理。有可能找到一个统一方法，让两者有关联，减少运算量。
